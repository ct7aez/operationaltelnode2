[general]
static=yes
writeprotect=no
clearglobalvars=no
[globals]
CONSOLE=Console/dsp				; Console interface for demo
IAXINFO=guest					; IAXtel username/password
TRUNK=DAHDI/G2					; Trunk interface
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)

PEDRO=SIP/pedro_soft
CLAUDIO=SIP/claudio_soft
JOAO=SIP/joao_soft
PAULO=SIP/paulo_soft

CCOTRAFFIC=SIP/001565751b8c
PK1=SIP/000b8244c40c
PK2=SIP/000b823ede27
PK3=SIP/000b823f6ea8
PK4=SIP/000b8244c346
PN1=SIP/e437d71015da
PN2=SIP/e437d71015c8
PN3=SIP/e437d7101598
PN4=SIP/e437d71015d9
CHE3=SIP/7c1eb300cb5d
CHE4=SIP/7c1eb300cb5c
testeiter=1999			;1999 só liga para est || 2999 liga est e pn
SONORIDPRIOR=1000
MULTICAST=MulticastRTP/basic/239.0.0.1:1234
PAGEALL=${CHE3}&${CHE4}
CRONP=/var/spool/asterisk/tmp/cro

[emergency-services]

exten => 112,1,Goto(dialasap,1)
exten => 911,1,Goto(dialasap,1)
exten => 999,1,Goto(dialasap,1)

exten => dialasap,1,Verbose(1,Emergency Call!!!!)
same => n,Dial(${LOCAL}/112)

[phones]

include => soft_phones
include => lab_phones
include => emergency-services
;include => unauthenticaded
include => services
include => record
include => omnibus

exten => i,1,Playback(pbx-invalid)
same = n,Goto(phones,start,1)

exten => t,1,Playback(vm-goodbye)
same => n,Hangup()

exten => 69699,1,NoOp(first line)
same => n,Playback(hello-world)
same => n,Playback(time)
same => n,Playback(bombsquad)
same => n,Playback(zombies)
same => n,Answer()
same => n,Hangup()

exten => 69333,1,NoOp(calling ipr110+ radio gatway)
same => n,Dial(${IPR110})
same => n,Progress()
same => n,Hangup()

[soft_phones]

exten => dummy,1,Answer()
same => n,NoOp(dummy test)
same => n,Wait(240)

exten => 69100,1,Answer()
same => n,Progress()
same => n,Playback(hello-world)
same => n,Dial(${JOAO})
same => n,Hangup()

exten => 69101,1,Answer()
same => n,Progress()
;same => n,Playback(zombies)
same => n,Dial(${PEDRO},60)
same => n,Hangup()

exten => 69102,1,Answer()
same => n,Progress()
same => n,Dial(${CLAUDIO})
same => n,Hangup()

exten => start,1,Answer()
same => n,background(enter-ext-of-person)
same => n,WaitExten(5)

exten => 69999,1,Answer()
same => n,background(enter-ext-of-person)
same => n,WaitExten(5)

[lab_phones]

exten => 123,1,NoOp()
same => n,Set(TEST=ehgsdjhgjkashdgkJASDHGxample)
same => n,Playback(silence/3)
same => n,SayNumber(${LEN(${TEST})})
same => n,Playback(silence/1)
same => n,Hangup()

exten => 124,1,NoOp(try to make a ping)
same => n,Set(pingtest=${SHELL(ping 10.228.2.30 -c 1 | grep rtt)})
same => n,NoOp(${pingtest})
same => n,Playback(silence/2)
same => n,SayAlpha(${pingtest})
same => n,Playback(silence/1)
same => n,Hangup()

exten => 125,1,NoOp(try to tell uptime)
same => n,Verbose(2,A guarnecer a estação/PN peername-${CHANNEL(peername)} uri-${CHANNEL(uri)} from-${CHANNEL(from)} extensão-${EXTEN} )
same => n,Playback(silence/2)
same => n,SayAlpha($[${SYSINFO(uptime)} / 24])
same => n,Playback(silence/1)
same => n,SayNumber(${SYSINFO(numcalls)})
same => n,Playback(silence/1)
same => n,Hangup()

exten => 127,1,NoOp(counting in to the database)
same => n,Set(COUNT=${DB(test/count)})
same => n,GotoIf($[${ISNULL(${COUNT})}]?:continue)
same => n,Set(DB(test/count)=1)
same => n,Goto(1)
same => n(continue),NoOp()
same => n,Playback(silence/1)
same => n,SayNumber(${COUNT})
same => n,Set(COUNT=$[${COUNT} + 1])
same => n,Set(DB(test/count)=${COUNT})
same => n,Goto(1)


exten => 69888,1,GotoIfTime(17:30-21:00,*,*,*?phones,start,1:phones,t,1)

exten => 69103,1,Answer()
same => n,Progress()
same => n,Dial(${TEL2},60)
same => n,Hangup()

exten => 69106,1,Answer()
same => n,Progress()
same => n,Dial(${TEL1},60)
same => n,Hangup()

exten => 69109,1,Answer()
same => n,Progress()
same => n,Dial(${TEL6},60)
same => n,Hangup()

exten => 69104,1,Answer()
same => n,Progress()
same => n,Dial(${TEL3},60)
same => n,Hangup()

exten => 69105,1,Answer()
same => n,Progress()
same => n,Dial(${TEL4},60)
same => n,Hangup()

exten => 69112,1,Answer()
same => n,Progress()
same => n,Page(${TEL2}&${TEL1},A(tt-weasels),10)
same => n,Hangup()

exten => 1,1,Playback(digits/1)
same => n,Goto(phones,start,1)

exten => 2,1,Playback(digits/2)
same => n,Goto(phones,start,1)

exten => 3,1,Playback(digits/3)
same => n,Goto(phones,start,1)

exten => 4,1,Playback(digits/4)
same => n,Goto(phones,start,1)

exten => 5,1,Playback(digits/5)
same => n,Goto(phones,start,1)

exten => 6,1,Playback(digits/6)
same => n,Goto(phones,start,1)

exten => 7,1,Playback(digits/7)
same => n,Goto(phones,start,1)

exten => 8,1,Playback(digits/8)
same => n,Goto(phones,start,1)

exten => 9,1,Playback(digits/9)
same => n,Goto(phones,start,1)

exten => 0,1,Playback(digits/0)
same = n,goto(phones,start,1)

exten => 10,1,Playback(digits/10)
same => n,Goto(demo,s,1)

exten => 69998,1,Answer()
same => n,Progress()
same => n,Dial(${TEL1}&${TEL2}&${TEL3},10)
same => n,Playback(vm-nobodyavail)
same => n,Hangup()

exten => 69111,1,Answer()
same => n,Progress()
same => n,Dial(${TEL5},60)
same => n,Hangup()

exten => 69113,1,Answer()
same => n,Progress()
same => n,Dial(${AXISVIDEO},20)
same => n,Hangup()

[lab_inoteska]

include => phones

;exten => 68120,1,Answer()
;same => n,Progress()
;same => n,Dial(${ATEL1},10)
;same => n,Hangup()


;exten => 68121,1,Answer()
;same => n,Progress()
;same => n,Dial(${ATEL2},10)
;same => n,Hangup()

exten => _68XXX,1,Answer()
same => n,Progress()
same => n,Dial(SIP/${EXTEN}@siptrunk2,10)
same => n,Hangup()


exten => 100,1,NoOp(teste com voicemail)
same => n,Dial(${PEDRO},10)
same => n,GotoIf($["${DIALSTATUS}" = "BUSY"]?busy:unavail)
same => n(unavail),VoiceMail(100@lab,u)
same => n,Hangup()
same => n(busy),VoiceMail(100@lab,b)
same => n,Hangup()

[services]

exten => *98,1,NoOp(Access to voicemail)
same => n,VoiceMailMain(100@lab)

[omnibus]

;Plano de numeração
;desguarnecer			eclip | 70XXX	usar num nos equip. que não suportam extensões alfa
;Guarnecer			guarn | 71XXX
;liga ascendente		jusan | 72000
;liga descendente		monta | 73000
;liga PN's ascendente		pnjusan | 74000
;liga PN's descendentes		pnmonta | 75000
;liga estações adjacentes	testa | 76000
;liga emergencia/prioridade	emerg | 77000
;liga anuncio manual/prioridade	anunman | 78000
;liga anuncio manual multicast	anunmanall | 78001
;liga anuncio manual paging	anunpageall | 78002
;gravar voz			rec | 79000
;Repete último anúncio		rep | 80000
;eclipse/guarnecer toggle	toggleche | 81000
;Anúncio temporizado		reptemp | 82000
;termina anuncios em exten	**
;termina anun em exten		*
;a tecla de desguarnecer/guarnecer marcará a extenção obtida do callerID escreve na base de dados 1XXX é o numero de Ordem.
;as PN's são referenciadas por 2XXX mantendo o numero de oredem em XXX
;gravações em /var/spool/asterisk/monitor

exten => s,1,Answer()
same => n,background(enter-ext-of-person)
same => n,WaitExten(3)

exten => i,1,Playback(pbx-invalid)
same = n,Goto(omnibus,s,1)

exten => t,1,Playback(vm-goodbye)
same => n,Hangup()

exten => u,1,Playback(vm-isunavail)
same => n,Goto(omnibus,s,1)

exten => _00[0-9a-zA-Z].,1,Set(exte=${FILTER(0-9a-zA-Z@-_.,${EXTEN})})
same => n,NoOp(${EXTEN})
same => n,Goto(omnibus,${exte},1)

exten => guarn,1,GoSub(omnibus-guarnecer,s,1())		
exten => eclip,1,GoSub(omnibus-desguarnecer,s,1())
exten => jusan,1,GoSub(omnibus-ascendente,s,1())
exten => monta,1,GoSub(omnibus-descendente,s,1())
exten => pnjusan,1,GoSub(omnibus-conf-ascendente,s,1())
exten => pnmonta,1,GoSub(omnibus-conf-descendente,s,1())
exten => testa,1,GoSub(omnibus-pn-conf,s,1())
;exten => emerg,1,GoSub(omnibus-sos-cco,s,1())
exten => rec,1,GoSub(recordservices,s,1())
exten => rep,1,GoSub(repult,s,1())
exten => toggleche,1,GoSub(omnibus-che-toggle,s,1())
exten => reptemp,1,GoSub(omnibus-sonor-temp,s,1())
exten => anunmanall,1,GoSub(omnibus-sonor-multicast,s,1())
exten => anunpageall,1,GoSub(omnibus-sonor-pageall,s,1())

;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

exten => _71XXX,1,GoSub(omnibus-guarnecer,s,1())
exten => _70XXX,1,GoSub(omnibus-desguarnecer,s,1())
exten => _72XXX,1,GoSub(omnibus-ascendente,s,1())
exten => _73XXX,1,GoSub(omnibus-descendente,s,1())
exten => _74XXX,1,GoSub(omnibus-conf-ascendente,s,1())
exten => _75XXX,1,GoSub(omnibus-conf-descendente,s,1())
exten => _76XXX,1,GoSub(omnibus-pn-conf,s,1())
exten => _77XXX,1,GoSub(omnibus-sos,s,1())
exten => _79XXX,1,GoSub(recordservices,s,1())
exten => _80XXX,1,GoSub(repult,s,1())
exten => _81XXX,1,GoSub(omnibus-che-toggle,s,1())
exten => _82XXX,1,GoSub(omnibus-sonor-temp,s,1())
exten => 78001,1,GoSub(omnibus-sonor-multicast,s,1())
exten => 78002,1,GoSub(omnibus-sonor-pageall,s,1())

;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

exten => 500,1,NoOp(try to tell uptime)
same => n,Playback(silence/1)
same => n,SayAlpha(${SYSINFO(uptime)})
same => n,Playback(hours)
same => n,Playback(silence21)
same => n,SayNumber(${SYSINFO(numcalls)})
same => n,Playback(calls)
same => n,Playback(silence/1)
same => n,Hangup()

exten => guarnsync,1,GoSub(omnibus-guarnecer-sync,s,1())
exten => desguarnsync,1,GoSub(omnibus-desguarnecer-sync,s,1())

exten => emerg/1000,1,GoSub(omnibus-sos-cco,s,1())			;emergencia para a supervisão

exten => sonor/1000,1,GoSub(omnibus-sonor,s,1())			;sonorização para a supervisão

exten => _3XXX,1,GoSub(omnibus-sonor,${EXTEN},1())			;acesso ao sipspk

exten => escut/1000,1,GoSub(omnibus-escut,s,1())			;spy

exten => *30,1,CallCompletionRequest()
same => n,Hangup()

exten => *31,1,CallCompletionCancel()
same => n,Hangup()

exten => 81000,hint,${CCOTRAFFIC}	;hint para as teclas de cada estação/PN traduz exten para device
exten => 81003,hint,${PK1}
exten => 81012,hint,${PK2}
exten => 81018,hint,${PK3}
exten => 81024,hint,${PK4}
exten => 82006,hint,${PN1}
exten => 82009,hint,${PN2}		
exten => 82015,hint,${PN3}
exten => 82021,hint,${PN4}
exten => 83018,hint,${CHE3}		;CHE = CHave de Eclipse
exten => 83024,hint,${CHE4}		;CHE = CHave de Eclipse

exten => 71000,hint,Custom:login1000	;hint para a tecla "Guarnecido"
exten => 71003,hint,Custom:login1003
exten => 71006,hint,Custom:login2006
exten => 71009,hint,Custom:login2009
exten => 71012,hint,Custom:login1012
exten => 71015,hint,Custom:login2015
exten => 71018,hint,Custom:login1018
exten => 71021,hint,Custom:login2021
exten => 71024,hint,Custom:login1024

exten => 70000,hint,Custom:logout1000	;hint para a tecla "Desguarnecido"
exten => 70003,hint,Custom:logout1003
exten => 70006,hint,Custom:logout2006
exten => 70009,hint,Custom:logout2009
exten => 70012,hint,Custom:logout1012
exten => 70015,hint,Custom:logout2015
exten => 70018,hint,Custom:logout1018
exten => 70021,hint,Custom:logout2021
exten => 70024,hint,Custom:logout1024

exten => 1000,hint,Custom:toggle1000	;hint para a tecla toggle "Desguarnecido" "eclipse" a implementar nos modulos de teclas
exten => 1003,hint,Custom:toggle1003
exten => 2006,hint,Custom:toggle2006
exten => 2009,hint,Custom:toggle2009
exten => 1012,hint,Custom:toggle1012
exten => 2015,hint,Custom:toggle2015
exten => 1018,hint,Custom:toggle1018
exten => 2021,hint,Custom:toggle2021
exten => 1024,hint,Custom:toggle1024
exten => 3018,hint,Custom:toggle3018
exten => 3024,hint,Custom:toggle3024


exten => 1000,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${CCOTRAFFIC},90)
same => n,GotoIf($["${DEVICE_STATE(${CCOTRAFFIC})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1003,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK1},90)
same => n,GotoIf($["${DEVICE_STATE(${PK1})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1012,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK2},90)
same => n,GotoIf($["${DEVICE_STATE(${PK2})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1018,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK3},90)
same => n,GotoIf($["${DEVICE_STATE(${PK3})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 1024,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PK4},90)
same => n,GotoIf($["${DEVICE_STATE(${PK4})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2006,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN1},90)
same => n,GotoIf($["${DEVICE_STATE(${PN1})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2009,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN2},90)
same => n,GotoIf($["${DEVICE_STATE(${PN2})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2015,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN3},90)
same => n,GotoIf($["${DEVICE_STATE(${PN3})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

exten => 2021,1,Answer()
same => n,GoSub(recordcall,s,1())
same => n,Dial(${PN4},90)
same => n,GotoIf($["${DEVICE_STATE(${PN4})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Progress()
same => n,Hangup()

[omnibus-sonor-multicast]		;TODO Page a few or all repensar se pode seleccionr apenas 1 ou mais. executar com * por exmp.
exten => s,1,Set(JITTERBUFFER(adaptive)=default)
same => n,Page(${MULTICAST},ir,15)
;exten => s,1,Page(${MULTICAST},ir,15)
same => n,Hangup()

[omnibus-sonor-pageall]
exten => s,1,Page(${PAGEALL},ir,15)	;TODO chamda em espera no sipspk? aumentar o timeout para deixar reproduzir os outros anuncios
same => n,Hangup()

[omnibus-che-toggle]
exten => s,1,Set(peername=${CALLERID(num)})
same => n,Set(peername=1${peername:1})
same => n,Set(dest=${HINT(81${peername:1}@omnibus)})
same => n,GoToIf($[${DB_EXISTS(omnibus/${peername})}]?:guarn)
same => n,GoToIf($["${DB(omnibus/${peername})}"="UNAVAIL"]?:eclip)
same => n(guarn),Verbose(2,A guarnecer a estação c/ chave de eclipse->${CHANNEL(from)})
same => n,Set(DEVICE_STATE(Custom:login${peername})=BUSY)
same => n,Set(DEVICE_STATE(Custom:logout${peername})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:toggle${peername})=RINGING)
same => n,Set(DB(omnibus/${peername})=${peername})
same => n,GoSub(omnibus-state-html,s,1(${peername},GUARNECIDO))
same => n,Dial(IAX2/iaxtrunk1@10.228.2.3:4569/guarnsync)
;same => n,SIPAddHeader(Call-Info: answer-after=0)
;same => n,Set(CALLERID(all)="GUARNECIDO" <${peername}>)
;same => n,Dial(${dest},S(3))
same => n,Hangup()
same => n(eclip),Verbose(2,A desguarnecer a estação c/ chave de eclipse->${CHANNEL(from)})
same => n,Set(DEVICE_STATE(Custom:login${peername})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:logout${peername})=BUSY)
same => n,Set(DEVICE_STATE(Custom:toggle${peername})=BUSY)
same => n,Set(DB(omnibus/${peername})=UNAVAIL)
same => n,GoSub(omnibus-state-html,s,1(${peername},ECLIPSE))
same => n,Dial(IAX2/iaxtrunk1@10.228.2.3:4569/desguarnsync)
;same => n,SIPAddHeader(Call-Info: answer-after=0)
;same => n,Set(CALLERID(all)="ECLIPSE" <${peername}>)
;same => n,Dial(${dest},S(3))
same => n,Hangup()

[recordcall]
exten => s,1,Set(filevarname=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${CHANNEL(from)}-${CALLERID(all)})
same => n,MixMonitor(${filevarname}.wav)
same => n,Return()

[repult]
exten => s,1,GotoIf($[${DB_EXISTS(sonor/${CALLERID(num)})}]?:omnibus,u,1)
same => n,Set(filename=${DB(sonor/${CALLERID(num)})})
same => n,System(cp /var/spool/asterisk/monitor/${filename}.wav /var/lib/asterisk/sounds)
same => n,Answer()
same => n,WaitExten(6)
exten => _1XXX,1,Set(dest=${HINT(83${EXTEN:1}@omnibus)})
same => n,Originate(${dest},app,Playback,because-paranoid&${DB(sonor/${CALLERID(num)})})
same => n,Hangup()
exten => 255,1,Originate(${PAGEALL},app,Playback,because-paranoid&${DB(sonor/${CALLERID(num)})})
same => n,Hangup()

[omnibus-sonor-temp]
exten => s,1,NoOp(Anúncio de greve ou qq coisa parecida)
same => n,Answer()
same => n,WaitExten(6)
exten => 78000,1,Set(selecanun=${DB(sonor/${CALLERID(num)})})
same => n,System(cp /var/spool/asterisk/monitor/${filename}.wav /var/lib/asterisk/sounds)
same => n,Goto(f,1)
exten => 78001,1,Set(selecanun=zombies)	
same => n,Goto(f,1)
exten => 78002,1,Set(selecanun=bombsquad)	
same => n,Goto(f,1)			
exten => 78003,1,Set(selecanun=unicorn_blood_MIXDOWN) 
same => n,Goto(f,1)
exten => 78004,1,Set(selecanun=timewarp) 
same => n,Goto(f,1)
exten => 78005,1,Set(selecanun=tt-codezone_MIXDOWN) 
same => n,Goto(f,1)
exten => 78006,1,Set(selecanun=lyrics-louie-louie) 
same => n,Goto(f,1)
exten => **,1,System(sed -i '/${CALLERID(num)}/d' /var/spool/asterisk/tmp/cro)  ;CANCEL ALL
same => n(doit),System(crontab /var/spool/asterisk/tmp/cro)
same => n,Set(listcallerdb=${DB_KEYS(sonortemp/SIP)})
same => n,NoOp(${listcallerdb})
same => n,While($["${SET(var=${POP(listcallerdb)})}" != ""])
same => n,GotoIf($[${DB_EXISTS(sonortemp/SIP/${var}/${CALLERID(num)})}]?eraseit:end)
same => n,NoOp(keeping ${var})
same => n(eraseit),Set(DB(sonortemp/SIP/${var}/${CALLERID(num)})=silence/1)
same => n(end),EndWhile()
same => n,Hangup()		;TODO permitir regulador de gerir todos os anuncios
exten => f,1,Answer()
same => n,NoOp(aqui * pode)
same => n,WaitExten(6)
exten => *335,1,GoSub(omnibus-sonor-temp-rm,s,1(${selecanun}))  ;DEL
exten => _1XXX,1,Set(dest=${HINT(83${EXTEN:1}@omnibus)})
same => n,System(sed -i '/${EXTEN}/d' /var/spool/asterisk/tmp/cro)
same => n,Set(stamp=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
same => n,NoOp(temp ${stamp})
same => n,GotoIf($[${DB_EXISTS(sonortemp/${dest}/${CALLERID(num)})}]?doit:)
same => n,Set(DB(sonortemp/${dest}/${CALLERID(num)})=silence/1)
same => n(doit),Set(DB(sonortemp/${dest}/${CALLERID(num)})=${DB(sonortemp/${dest}/${CALLERID(num)})}&${selecanun}&silence/3)
same => n,Set(selecanun=${DB(sonortemp/${dest}/${CALLERID(num)})})
same => n,System(touch /var/spool/asterisk/tmp/bak_${EXTEN}_${CALLERID(num)}_${stamp}.call)
same => n,System(echo "Channel: ${dest}\nApplication: Playback\nData: ${selecanun}\nCallerID: Anúncio temporizado" > /var/spool/asterisk/tmp/bak_${EXTEN}_${CALLERID(num)}_${stamp}.call)
same => n,System(touch /var/spool/asterisk/tmp/cro)
same => n,System(echo "*/2 * * * * cp /var/spool/asterisk/tmp/bak_${EXTEN}_${CALLERID(num)}_${stamp}.call /var/spool/asterisk/tmp/${EXTEN}_${CALLERID(num)}_${stamp}.call&&mv /var/spool/asterisk/tmp/${EXTEN}_${CALLERID(num)}_${stamp}.call /var/spool/asterisk/outgoing" >> /var/spool/asterisk/tmp/cro)
same => n,NoOp(escrita do cro ${SYSTEMSTATUS})
same => n(doit),System(crontab /var/spool/asterisk/tmp/cro)
same => n,NoOp(exec crontab${SYSTEMSTATUS})
;same => n,Originate(${dest},app,Playback,oops2&${selecanun})
same => n,Hangup()

exten => *255,1,Set(dest=${PAGEALL})    ;ALL
same => n,System(sed -i '/all/d' /var/spool/asterisk/tmp/cro)
same => n,Set(stamp=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
same => n,GotoIf($[${DB_EXISTS(sonortemp/all/${CALLERID(num)})}]?doit:)
same => n,Set(DB(sonortemp/all/${CALLERID(num)})=silence/1)
same => n(doit),Set(DB(sonortemp/all/${CALLERID(num)})=${DB(sonortemp/all}/${CALLERID(num)})}&${selecanun}&silence/3)
same => n,Set(selecanun=${DB(sonortemp/all/${CALLERID(num)})})
same => n,System(touch /var/spool/asterisk/tmp/bak_all_${CALLERID(num)}_${stamp}.call)
same => n,System(echo "Channel: ${dest}\nApplication: Playback\nData: ${selecanun}\nCallerID: Anúncio temporizado" > /var/spool/asterisk/tmp/bak_all_${CALLERID(num)}_${stamp}.call)
same => n,System(touch /var/spool/asterisk/tmp/cro)
same => n,System( echo "*/2 * * * * cp /var/spool/asterisk/tmp/bak_all_${CALLERID(num)}_${stamp}.call /var/spool/asterisk/tmp/all_${CALLERID(num)}_${stamp}.call&&mv /var/spool/asterisk/tmp/all_${CALLERID(num)}_${stamp}.call /var/spool/asterisk/outgoing" >> /var/spool/asterisk/tmp/cro)
same => n(doit),System(crontab /var/spool/asterisk/tmp/cro)
same => n,NoOp(${SYSTEMSTATUS})
;same => n,Originate(${dest},app,Playback,oops2&${selecanun})
same => n,Hangup()

[omnibus-sonor-temp-rm]		;TODO remover anuncio temp para todos
exten => s,1,NoOp(remove o anun: ${ARG1})
same => n,Answer()
same => n,NoOp(dentro do apagar anun)
same => n,WaitExten(6)
exten => _1XXX,1,Set(dest=${HINT(83${EXTEN:1}@omnibus)})
same => n,Set(stamp=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
same => n,Set(selecanun=${DB(sonortemp/${dest}/${CALLERID(num)})})
same => n,Set(selecanun=${LISTFILTER(selecanun,&,${ARG1})})
same => n,NoOp(${selecanun})
same => n,Set(DB(sonortemp/${dest}/${CALLERID(num)})=${selecanun})
same => n,System(echo "Channel: ${dest}\nApplication: Playback\nData: ${selecanun}\nCallerID: Anúncio temporizado" > /var/spool/asterisk/tmp/bak_${EXTEN}_${CALLERID(num)}_${stamp}.call)
same => n,System(touch /var/spool/asterisk/tmp/cro)
same => n,System(sed -i '/${EXTEN}_${CALLERID(num)}/d' /var/spool/asterisk/tmp/cro)
same => n,System(echo "*/2 * * * * cp /var/spool/asterisk/tmp/bak_${EXTEN}_${CALLERID(num)}_${stamp}.call /var/spool/asterisk/tmp/${EXTEN}_${CALLERID(num)}_${stamp}.call&&mv /var/spool/asterisk/tmp/${EXTEN}_${CALLERID(num)}_${stamp}.call /var/spool/asterisk/outgoing" >> /var/spool/asterisk/tmp/cro)
same => n(doit),System(crontab /var/spool/asterisk/tmp/cro)
same => n,NoOp(${SYSTEMSTATUS})
same => n,Hangup()

[recordcall-sonor]
exten => s,1,Set(filevarname=sonor-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})	
same => n,Set(DB(sonor/${CALLERID(num)})=${filevarname})
same => n,MixMonitor(${filevarname}.wav,b)
same => n,Return(${filevarname})

[omnibus-state-html]
exten => s,1,System(touch /var/log/asterisk/state&&touch /var/log/asterisk/buffstate)
same => n,System(sed -i '/${ARG1}/d' /var/log/asterisk/buffstate)
same => n,Set(peerlog=${HINT(8${ARG1}@omnibus)})
same => n,Set(peerlog=${peerlog:4})
same => n,System(echo "${ARG1}\t${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}\t${CALLERID(all)}\t${ARG2}\t${SIPPEER(${peerlog},ip)}\t${SIPPEER(${peerlog},status)}" >> /var/log/asterisk/buffstate)
same => n,System(sort --key=1.2n < /var/log/asterisk/buffstate > /var/log/asterisk/state)
same => n,Return()

[omnibus-guarnecer-sync]
exten => s,1,Verbose(2,A guarnecer a estação/PN  peername -> ${CHANNEL(peername)} na extensão -> ${CALLERID(num)})	
same => n,Set(peername=${CALLERID(num)})
same => n,Set(peername=1${peername:1})
same => n,Set(DEVICE_STATE(Custom:login${peername})=BUSY)
same => n,Set(DEVICE_STATE(Custom:logout${peername})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:toggle${peername})=RINGING)
same => n,Set(DB(omnibus/${peername})=${peername})
same => n,GoSub(omnibus-state-html,s,1(${peername},GUARNECIDO))
same => n,Hangup()

[omnibus-guarnecer]
exten => s,1,Verbose(2,A guarnecer a estação/PN  peername -> ${CHANNEL(peername)} na extensão -> ${CALLERID(num)})	
same => n,Set(DEVICE_STATE(Custom:login${CALLERID(num)})=BUSY)
same => n,Set(DEVICE_STATE(Custom:logout${CALLERID(num)})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:toggle${CALLERID(num)})=RINGING)
same => n,Set(peername=${CALLERID(num)})
same => n,Set(DB(omnibus/${peername})=${peername})
same => n,GoSub(omnibus-state-html,s,1(${peername},GUARNECIDO))
same => n,Dial(IAX2/iaxtrunk1@10.228.2.3:4569/guarnsync)
same => n,Playback(silence/1&agent-loginok)
same => n,Hangup()

[omnibus-desguarnecer-sync]
exten => s,1,Verbose(2,A desguarnecer a estação/PN  peername -> ${CHANNEL(peername)} na extensão -> ${CALLERID(num)})
same => n,Set(peername=${CALLERID(num)})
same => n,Set(peername=1${peername:1})
same => n,Set(DEVICE_STATE(Custom:login${peername})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:logout${peername})=BUSY)
same => n,Set(DEVICE_STATE(Custom:toggle${peername})=BUSY)
same => n,Set(peername=${CALLERID(num)})
same => n,Set(DB(omnibus/${peername})=UNAVAIL)
same => n,GoSub(omnibus-state-html,s,1(${peername},ECLIPSE))
same => n,Hangup()

[omnibus-desguarnecer]
exten => s,1,Verbose(2,A desguarnecer a estação/PN  peername -> ${CHANNEL(peername)} na extensão -> ${CALLERID(num)})
same => n,Set(DEVICE_STATE(Custom:login${CALLERID(num)})=NOT_INUSE)
same => n,Set(DEVICE_STATE(Custom:logout${CALLERID(num)})=BUSY)
same => n,Set(DEVICE_STATE(Custom:toggle${CALLERID(num)})=BUSY)
same => n,Set(peername=${CALLERID(num)})
same => n,Set(DB(omnibus/${peername})=UNAVAIL)
same => n,GoSub(omnibus-state-html,s,1(${peername},ECLIPSE))
same => n,Dial(IAX2/iaxtrunk1@10.228.2.3:4569/desguarnsync)
same => n,Playback(silence/1&agent-loggedoff)
same => n,Hangup()

[omnibus-ascendente]
exten => s,1,Verbose(2,A ligar para estação na direcção ascendente)
same => n,Set(exte=${CALLERID(num)})
same => n(inc),Set(exte=$[${exte}+1])
same => n(test),GotoIf($[${exte} > ${testeiter}]?omnibus,u,1:)	;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte})})
same => n,GotoIf($[${statethis}]?:inc)
same => n,GotoIf($[${state} = UNAVAIL]?inc:omnibus,${exte},1)

[omnibus-descendente]
exten => s,1,Verbose(2,A ligar para estação na direcção descendente)
same => n,Set(exte=${CALLERID(num)})
same => n(dec),Set(exte=$[${exte}-1])
same => n(test),GotoIf($[${exte} < 1000]?omnibus,u,1:)	;testa numero máximo de iterações para não pendurar
same => n,Set(state=${DB(omnibus/${exte})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte})})
same => n,GotoIf($[${statethis}]?:dec)
same => n,GotoIf($[${state} = UNAVAIL]?dec:omnibus,${exte},1)

[omnibus-conf-ascendente]
exten => s,1,Verbose(2,A ligar PN's na direcção ascendente)
same => n,Set(exte_pn_init=$[${CALLERID(num)}+1000])			;+1000 para procurar no dominio do dialplan das PN's
same => n,Set(exte_est=${CALLERID(num)})				;criação de variavel para procurar no dominio do dialplan das estações (de onde a chamada tem de obrigatóriamente ser iniciada) 
same => n(inc),Set(exte_est=$[${exte_est}+1])
same => n(test_est),GotoIf($[${exte_est} > 2000]?makeconf:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte_est})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte_est})})
same => n,Gotoif($[${statethis}]?:inc)					;se NÃO existe incrementa
same => n,GotoIf($[${state} = UNAVAIL]?inc:)				;se NÃO disponivel incrementa
same => n,Set(deviceadd=${HINT(8${exte_est}@omnibus)}&)			;comentar para não integrar a prox estação guarnecida
same => n(makeconf),Set(exte_pn_max=$[${exte_est}+1000])		;define o intrevalo de procura de PN's guarnecidas entre ${exte_pn_init} e ${exte_pn_max}
									;ultima estação guarnecida detectada e intervalo de num pn estabelecido
same => n(incpn),Set(exte_pn_init=$[${exte_pn_init}+1])
same => n(test_pn),GotoIf($[${exte_pn_init} > 3000]?doit:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(comp=$[${exte_pn_init} <= ${exte_pn_max}])
same => n,GotoIf(${comp})?:doit)					;salta do ciclo de inc
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte_pn_init})}])?:incpn)	;se NÃo existe incrementa e menor que pn_max
same => n,GotoIf($[${DB(omnibus/${exte_pn_init})}= UNAVAIL])?incpn:)	;se NÃO disponivel incrementa
same => n,Set(deviceadd=${deviceadd}${HINT(8${exte_pn_init}@omnibus)}&)
same => n,NoOp(limite max ${exte_pn_max} limite minimo ${exte_pn_init})
same => n,Set(comp=$[${exte_pn_init} <= ${exte_pn_max}])
same => n,GotoIf(${comp})?incpn:)
same => n(doit),Set(strip=$[${LEN(${deviceadd})} - 1])			;retira o ultimo & da string para não criar erros na app page
same => n,GotoIf($[${strip} < 5])?omnibus,u,1:)
same => n,Set(deviceadd=${deviceadd:0:${strip}})
same => n,Answer()
same => n,Progress()
same => n,Page(${deviceadd},dri,60)					;TODO definir o nome da gravação da app page
same => n,Hangup()

[omnibus-conf-descendente]
exten => s,1,Verbose(2,A ligar PN's na direcção descendente)
same => n,Set(exte_pn_init=$[${CALLERID(num)}+1000])
same => n,Set(exte_est=${CALLERID(num)})
same => n(dec),Set(exte_est=$[${exte_est}-1])
same => n(test_est),GotoIf($[${exte_est} < 1000]?makeconf:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte_est})})
same => n,Set(statethis=${DB_EXISTS(omnibus/${exte_est})})
same => n,Gotoif($[${statethis}]?:dec)					;se NÃO existe incrementa
same => n,GotoIf($[${state} = UNAVAIL]?dec:)				;se NÃO disponivel incrementa
same => n,Set(deviceadd=${HINT(8${exte_est}@omnibus)}&)			;comentar para não integrar a prox estação guarnecida
same => n(makeconf),Set(exte_pn_max=$[${exte_est}+1000])		;define o intrevalo de procura de PN's guarnecidas entre ${exte_pn_init} e ${exte_pn_max}
									;ultima estação guarnecida detectada e intervalo de num pn estabelecido
same => n(decpn),Set(exte_pn_init=$[${exte_pn_init}-1])
same => n(test_pn),GotoIf($[${exte_pn_init} < 2000]?doit:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(comp=$[${exte_pn_init} >= ${exte_pn_max}])
same => n,GotoIf(${comp})?:doit)					;salta do ciclo de inc
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte_pn_init})}])?:decpn)	;se NÃo existe incrementa e menor que pn_max
same => n,GotoIf($[${DB(omnibus/${exte_pn_init})}= UNAVAIL])?decpn:)	;se NÃO disponivel incrementa
same => n,Set(deviceadd=${deviceadd}${HINT(8${exte_pn_init}@omnibus)}&)
same => n,NoOp(limite max ${exte_pn_max} limite minimo ${exte_pn_init})
same => n,Set(comp=$[${exte_pn_init} >= ${exte_pn_max}])
same => n,GotoIf(${comp})?decpn:)
same => n(doit),Set(strip=$[${LEN(${deviceadd})} - 1])
same => n,GotoIf($[${strip} < 5])?omnibus,u,1:)
same => n,Set(deviceadd=${deviceadd:0:${strip}})
same => n,Page(${deviceadd},dri,60)
same => n,Hangup()

[omnibus-pn-conf]
exten => s,1,Verbose(2,A ligar para as estações guarnecidas adjacentes)
same => n(vizup),Set(exte=$[${CALLERID(num)}-1000])
same => n(inc),Set(exte=$[${exte}+1])
same => n(testup),GotoIf($[${exte} > ${testeiter}]?omnibus,u,1:)	;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte})})
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte})}])?:inc)		;se NÃo existe decrementa
same => n,GotoIf($[${state} = UNAVAIL]?inc:)
same => n,Set(extup=${exte})
same => n(vzdn),Set(exte=$[${CALLERID(num)}-1000])
same => n(dec),Set(exte=$[${exte}-1])
same => n(testdn),GotoIf($[${exte} < 1000]?omnibus,u,1:)		;testa numero máximo de iterações para não pendurar 1999 só liga para est 3000 liga est e pn
same => n,Set(state=${DB(omnibus/${exte})})
same => n,GotoIf($[${DB_EXISTS(omnibus/${exte})}])?:dec)		;se NÃo existe decrementa
same => n,GotoIf($[${state} = UNAVAIL]?dec:)
same => n,Set(extdn=${exte})
same => n,Set(deviceup=${HINT(8${extup}@omnibus)})
same => n,Set(devicedn=${HINT(8${extdn}@omnibus)})
same => n,Set(pnconf=${deviceup}&${devicedn})
same => n,Page(${pnconf},dri,60)
same => n,Hangup()


[omnibus-sonor-comp]
exten => 001,1,Set(selecanun=zombies)		;TODO repetir ultimo anúncio para local definido ou todos
same => n,Goto(f,1)
exten => 002,1,Set(selecanun=bombsquad)
same => n,Goto(f,1)		
exten => 003,1,Set(selecanun=unicorn_blood_MIXDOWN) 
same => n,Goto(f,1)
exten => 004,1,Set(selecanun=timewarp) 
same => n,Goto(f,1)
exten => 005,1,Set(selecanun=tt-codezone_MIXDOWN) 
same => n,Goto(f,1)
exten => 006,1,Set(selecanun=lyrics-louie-louie) 
same => n,Goto(f,1)
exten => f,1,WaitExten(6)
exten => _1XXX,1,Set(dest=${HINT(83${EXTEN:1}@omnibus)})
same => n,Originate(${dest},app,Playback,oops2&${selecanun})
same => n,Hangup()

[omnibus-sonor]

exten => t,1,Playback(vm-goodbye)
same => n,Hangup()

exten => s,1,Answer()
same => n,WaitExten(6)

exten => _78XXX,1,GoSub(omnibus-sonor-comp,${EXTEN:2},1())

exten => 1003/1000,1,SoftHangup(${CHE},a)		;desliga anuncios que estejam a decorrer. prioridade ao supervisor
same => n,Goto(3003,1)					;Estações marca 3XXX e CCO 1XXX

exten => 3003,1,GotoIf($["${DEVICE_STATE(${CHE})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Page(${CHE},irA(tt-weasels),30)
same => n,Progress()
same => n,Hangup()

exten => 1012/1000,1,,SoftHangup(${CHE},a)
same => n,Goto(3012,1)

exten => 3012,1,GotoIf($["${DEVICE_STATE(${CHE})}"="UNAVAILABLE"]?omnibus,u,1:)
same => n,Page(${CHE},irA(tt-weasels),30)
same => n,Progress()
same => n,Hangup()

exten => 1018/1000,1,SoftHangup(${CHE3},a)	;TODO tocar anúncio à chamada desligada
same => n,Goto(3018,1)
exten => 3018,1,GotoIf($["${DEVICE_STATE(${CHE3})}"="UNAVAILABLE"]?omnibus,u,1:)	;encravar a estação ao sipspk
same => n,GotoIf($[$["${CALLERID(num)}" = "1018"]|$["${CALLERID(num)}" = "1000"]]?:omnibus,u,1)
same => n,GoSub(recordcall-sonor,s,1())
same => n,Dial(${CHE3},5,A(oops2))
same => n,Hangup()

exten => 1024/1000,1,SoftHangup(${CHE4},a)
same => n,Goto(3024,1)
exten => 3024,1,GotoIf($["${DEVICE_STATE(${CHE4})}"="UNAVAILABLE"]?omnibus,u,1:)	;encravar a estação ao sipspk
same => n,GotoIf($[$["${CALLERID(num)}" = "1024"]|$["${CALLERID(num)}" = "1000"]]?:omnibus,u,1)
same => n,GoSub(recordcall-sonor,s,1())
same => n,Dial(${CHE4},5,A(oops2))
same => n,Hangup()

[recordservices]
exten => s,1,Playback(vm-intro)
same => n,Set(recordname=sonor-${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)})
same => n,Answer()
same => n,Record(${recordname}.wav,,,k)
same => n,Wait(2)
same => n,Playback(${recordname})
same => n,Wait(1)
same => n,Set(DB(sonor/${CALLERID(num)})=${recordname})
same => n,Hangup()

[omnibus-sos-cco]
exten => s,1,NoOp(Chamada de emergência do CCO)
same => n,Verbose(2,Chamada de emergencia ${CHANNEL(from)}-${CALLERID(all)})
;same => n,GotoIf($["${DEVICE_STATE(${CCOTRAFFIC})}"="UNAVAILABLE"]?omnibus,u,1:)
;same => n,SoftHangup(${CCOTRAFFIC},a)		;desliga todas as chamadas se existirem
same => n,Answer()
same => n,Read(exte,,4,n,,6)
same => n,Set(device=${HINT(8${exte}@omnibus)})
same => n,GoSub(recordcall,s,1())
same => n,SIPAddHeader(Call-Info: answer-after=0)
same => n,Set(caller=${CALLERID(name)})
same => n,Set(numcaller=${CALLERID(num)})
same => n,Set(CALLERID(all)="EMERGÊNCIA ${caller}" <${numcaller}>)
same => n,Dial(${device},90,O(1)iA(beep))
same => n,Progress()					;TODO play annouce to to holded call
same => n,Hangup()


[omnibus-sos]
exten => s,1,NoOp(Chamada de emergência)
same => n,Verbose(2,Chamada de emergencia ${CHANNEL(from)}-${CALLERID(all)})
same => n,GotoIf($["${DEVICE_STATE(${CCOTRAFFIC})}"="UNAVAILABLE"]?omnibus,u,1:)
;same => n,SoftHangup(${CCOTRAFFIC},a)
same => n,GoSub(recordcall,s,1())
;same => n,SIPAddHeader(call-info:info=answer-after=4)
same => n,SIPAddHeader(alert-info:answer-after=4)
same => n,Set(caller=${CALLERID(name)})
same => n,Set(numcaller=${CALLERID(num)})
same => n,Set(CALLERID(all)="EMERGÊNCIA ${caller}" <${numcaller}>)
same => n,Dial(${CCOTRAFFIC},90,O(1)iA(beep))
;same => n,Page(${CCOTRAFFIC},dri,60)
same => n,Progress()
same => n,Hangup()

[omnibus-escut]

exten => t,1,Playback(vm-goodbye)
same => n,Hangup()

exten => s,1,Answer()
;same => n,Read(exte,,4,n,,6)
;same => n,ExtenSpy(${exte}@omnibus,Er)
same => n,ChanSpy(SIP,r)
same => n,Hangup()

